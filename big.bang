#!/bin/bash
#
# big.bang: consolidated idenpotent installation of orbit

### SECTION: preamble ###

echo "BIG.BANG: ORBIT INSTALL"

[ "$(id -u)" == "0" ] || die "this script mut be run by root"

PS4="-|"
set -e -x

die() { echo "error: $1"; exit 1 ; }
read_config() {
	[ -z "${1}" ] && die "read_config needs argument"
	cat <<EOF | python3
import config
print(config.$1)
EOF
}

### SECTION: initialize environment ###

# in case clock is for some reason unsynced (e.g. revert to snapshot)
chronyc makestep
SVC_DIR="/etc/systemd/system"

DOCSRC=$(read_config docsrc)
DATAROOT=$(read_config dataroot)
FQDN=$(read_config srvname)
PRODUCTION=$(read_config production)

RADIUS_PORT=$(read_config radius_port)
SMTP_PORT=$(read_config smtp_port)
SMTP_PORT_EXT=$(read_config smtp_port_ext)
POP3_PORT=$(read_config pop3_port)
POP3_PORT_EXT=$(read_config pop3_port_ext)

ORBIT_ROOT=$(read_config orbit_root)
EMAIL_DIR=$(read_config email_dir)

DATABASE=$(read_config database)
BASEDATA=$(read_config basedata)


# in case we are invoked from somwhere else
cd $ORBIT_ROOT

[ ! -d "$DATAROOT" ] && git clone "$DOCSRC" "$DATAROOT"
# temporary while master is not default FIXME
cd $DATAROOT && git checkout master && cd $ORBIT_ROOT

# Install dependencies
dnf install -y $(cat $ORBIT_ROOT/dnf.deps) > /dev/null || die "failed to install dnf.deps"
pip install -r "$ORBIT_ROOT/pip.deps"

### SECTION: SELinux configuration ###

setsebool -P httpd_can_network_connect 1
setsebool -P domain_can_mmap_files 1
# this is slightly jank but it's better than permissive
# ideally orbit should have a custom policy
checkmodule -M -m -o email.mod email.te
semodule_package -o email.pp -m email.mod
semodule -i email.pp 

# seport != seaport: seaport is expensive
# and seport fixes last known bug in basic usage of this script
SEPORTLIST_HTTP=$(semanage port -l | grep --quiet http_port_t)

# Since nginx proxies our internal mail system, the smtp.socket and pop.socket units
# are triggered by nginx in httpd_t context, so when the email servers are triggered,
# aceess is denied by SELinux unless the ports the sockets bind to have the same context
# in which their invocation was generated, i.e. http_port_t
echo $SEPORTLIST_HTTP | grep --quiet 465 || semanage port -m -t http_port_t -p tcp 465
echo $SEPORTLIST_HTTP | grep --quiet 995 || semanage port -m -t http_port_t -p tcp 995

### SECTION: initialize radius ###

# There is an assignment.list file that lives with the rest of the public data
# however we just intialize database tables from default "base data" dump
[ -f "$DATABASE" ] && mv "$DATABASE" $DATABASE.$(date +%s)
sqlite3 $DATABASE ".read $BASEDATA" "COMMIT;"
# radius has pretty much no special dependencies outside
# of databse instalation and the pip/dnf deps
# which is a fabulous upgrade from the chaos of cano.py
cat > $SVC_DIR/radius.service <<EOF
[Unit]
Description=Orbit frontend HTML server

[Service]
WorkingDirectory=$ORBIT_ROOT
ExecStart=uwsgi $ORBIT_ROOT/radius.ini
EOF
systemctl daemon-reload
systemctl enable --now radius

### SECTION: install email ###

make -C smtp SRVNAME="$FQDN" > /dev/null
make -C pop3 > /dev/null

# Configure smtp and pop users and groups

# system account, no home dir,
# no login shell, home is /
id -u smtp 2>&1 > /dev/null 		\
	|| useradd -r -M 		\
		-s /usr/sbin/nologin 	\
		-d / 			\
		-c "smtp server user" 	\
		smtp

# system account, no home dir,
# no login shell, home is /
# in smtp group
id -u pop 2>&1 > /dev/null 		\
	|| useradd -r -M 		\
		-s /usr/sbin/nologin 	\
		-d / 			\
		-G "smtp" 		\
		-c "pop server user" 	\
		pop

# Create mail inbox and submission log

mkdir -p 	$EMAIL_DIR
chmod 0710 	$EMAIL_DIR
mkdir -p 	$EMAIL_DIR/mail
chmod 0750 	$EMAIL_DIR/mail
mkdir -p 	$EMAIL_DIR/logs
chmod 0700 	$EMAIL_DIR/logs

chown -R smtp:smtp $EMAIL_DIR

# Create submission queue for each assignment
ASSIGNMENT_LIST=$($ORBIT_ROOT/hyperspace -z)
#
# assignment folder creation
for ASN in $ASSIGNMENT_LIST
do
	# add system group
	getent group $ASN > /dev/null || groupadd -r -U smtp $ASN
	ASN_DIR="$EMAIL_DIR/$ASN"
	mkdir -p $ASN_DIR
	chmod 0700 $ASN_DIR
	chown smtp:$ASN $ASN_DIR
done

# Install systemd services

cat > $SVC_DIR/smtp@.service <<EOF
[Unit]
Description=per-connection smtp service

[Service]
User=smtp
StandardInput=socket
CapabilityBoundingSet=cap_dac_read_search
AmbientCapabilities=cap_dac_read_search
ExecStart=$ORBIT_ROOT/smtp/smtp $EMAIL_DIR
EOF

cat > $SVC_DIR/smtp.socket <<EOF
[Unit]
Description=smtp server socket

[Socket]
ListenStream=127.0.0.1:$SMTP_PORT
FreeBind=true
Accept=yes

[Install]
WantedBy=sockets.target
EOF

cat > $SVC_DIR/pop3@.service <<EOF
[Unit]
Description=per-connection pop3 service

[Service]
User=pop
StandardInput=socket
ExecStart=$ORBIT_ROOT/pop3/pop3 $EMAIL_DIR/mail
EOF

cat > $SVC_DIR/pop3.socket <<EOF
[Unit]
Description=pop3 server socket

[Socket]
ListenStream=127.0.0.1:$POP3_PORT
FreeBind=true
Accept=yes

[Install]
WantedBy=sockets.target
EOF


# Immediately enable email servers
systemctl daemon-reload
systemctl enable --now smtp.socket
systemctl enable --now pop3.socket

# Validate email configuration

systemctl is-active --quiet smtp.socket \
	|| echo "failed to install smtp"
systemctl is-active --quiet pop3.socket  \
	|| echo "failed to install pop3"

printf "QUIT\r\n" | netcat localhost 1465 | \
	diff -up /dev/stdin <(printf \
	"220 SMTP server ready\r\n221 Goodbye\r\n") \
		|| echo "failed to validate smtp"

printf "QUIT\r\n" | netcat localhost 1995 | \
	diff -up /dev/stdin <(printf \
	"+OK POP3 server ready\r\n+OK bye\r\n") \
		|| echo "failed to validate pop3"


### SECTION: validate SSL certificates ###

SSL_RAW=$(certbot certificates -d $FQDN 2>/dev/null)
if grep -q 'No certificates found.' <<< "$SSL_RAW"; then
	echo "no ssl certificate" ;
	exit 1
fi

SSL_CRT=$(awk -F': ' '/Certificate Path/ { print $2 }' <<< $SSL_RAW)
if test -z "${SSL_CRT}" ; then
	echo "no .crt file for ssl" ;
	exit 1
fi

SSL_KEY=$(awk -F': ' '/Private Key Path/ { print $2 }' <<< $SSL_RAW)
if test -z "${SSL_CRT}" <<< "$SSL_RAW"; then
	echo "no .crt file for ssl" ;
	exit 1
fi

### SECTION: install nginx configuration ###

if [ "$PRODUCTION" == "True" ]; then
DEV_BLOCK=""
DEV_OPT=""
else
DEV_BLOCK=$(echo -e "\n\t\tlocation = /devfooter {\n\t\t\tinternal;\n\t\t\treturn 200 \"<br><hr><i><b>Development Instance</b></i><hr>\";\n\t\t}\n\n\n")
DEV_OPT=$(echo -e "\t\tadd_after_body /devfooter;\n\t\t")
fi

cat > /etc/nginx/nginx.conf <<EOF
# orbit nginx configuration
# generated on $(date) by big.bang

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
	worker_connections 1024;
}

http {
	log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
		      '\$status \$body_bytes_sent "\$http_referer" '
		      '"\$http_user_agent" "\$http_x_forwarded_for"';

	access_log  /var/log/nginx/access.log  main;

	sendfile            on;
	tcp_nopush          on;
	keepalive_timeout   65;
	types_hash_max_size 4096;

	include             /etc/nginx/mime.types;
	default_type        application/octet-stream;

	server {
		ssl_certificate /etc/letsencrypt/live/${FQDN}/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/${FQDN}/privkey.pem;
		server_name ${FQDN};
		listen 443 ssl;
		listen [::]:443 ssl;
		include /etc/letsencrypt/options-ssl-nginx.conf;
		ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
		error_page 401 /login?target=$uri;
		error_page 403 /403.md;
		error_page 404 /404.md;
		error_page 502 /502.md;
		error_page 502 /502.md;
		error_page 500 /500.md;

		# DOCUMENT ROOT
		location / {
		    root /var/orbit/docs;
		}

		# MATRIX
		location /.well-known/matrix/client {
			return 200 '{"m.homeserver": {"base_url": "https://${FQDN}:${MATRIX_PORT}"}}';
			default_type application/json;
			add_header Access-Control-Allow-Origin *;
		}
		${DEV_BLOCK}
		location = / {
		    rewrite .* /index.md;
		}

		# RADIUS
		location ~* ^((?!/cgit)(.*\.md)|/log(in|out)|/dashboard|/register|/mail_auth)$ {
			include uwsgi_params;
			proxy_pass http://localhost:$RADIUS_PORT;
		${DEV_OPT}}

		# CGIT TODO
		location ~* /cgit(.*) {
			include fastcgi_params;

			fastcgi_param SCRIPT_FILENAME /var/www/cgi-bin/cgit;
			fastcgi_param PATH_INFO \$1;

			fastcgi_pass localhost:7070;
		}

	}
	server {
		listen 80;
		listen [::]:80;
		if (\$host = ${FQDN}) {
			return 301 https://$host$request_uri;
		}
		return 404;
	}
}

mail {
	proxy_pass_error_message on;

	ssl_certificate $SSL_CRT;
	ssl_certificate_key $SSL_KEY;
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

	server {
		auth_http 127.0.0.1:$RADIUS_PORT/mail_auth;
		listen $SMTP_PORT_EXT ssl;
		protocol smtp;
		smtp_auth plain login;
		proxy_smtp_auth on;
		xclient off;
	}

	server {
		auth_http 127.0.0.1:$RADIUS_PORT/mail_auth;
		listen $POP3_PORT_EXT ssl;
		protocol pop3;
		pop3_auth plain;
	}
}
EOF

### SECTION: online orbit ###

# Allow external access
firewall-cmd --add-service=pop3s		2>&1 >/dev/null || die "firewall"
firewall-cmd --add-service=pop3s --permanent	2>&1 >/dev/null || die "firewall"
firewall-cmd --add-service=smtps  		2>&1 >/dev/null || die "firewall"
firewall-cmd --add-service=smtps --permanent 	2>&1 >/dev/null || die "firewall"
firewall-cmd --add-service=https		2>&1 >/dev/null || die "firewall"
firewall-cmd --add-service=https --permanent 	2>&1 >/dev/null || die "firewall"

# Finally, launch nginx to expose the server
systemctl enable --now nginx

curl -k https://localhost 2>&1 >/dev/null \
	&& echo "BIG.BANG: ORBIT ONLINE"  \
	|| echo "BIG.BANG: ORBIT OFFLINE"
